<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andrew Pierce</title>
    <description>Jekyll Theme Demo
</description>
    <link>http://andrewmpierce.github.io/</link>
    <atom:link href="http://andrewmpierce.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>2016-02-28 21:44:16 -0500</pubDate>
    <lastBuildDate>2016-02-28 21:44:16 -0500</lastBuildDate>
    <generator>Jekyll v</generator>
    
      <item>
        <title>Volunteering at RailsBridgeTri</title>
        <description>&lt;p&gt;** This post is about &lt;a href=&quot;http://www.railsbridge.org/&quot;&gt;RailsBridge&lt;/a&gt;.
If you want to check out the curriculum, &lt;a href=&quot;http://docs.railsbridge.org/docs/&quot;&gt;it’s posted here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This weekend I had the opportunity to volunteer as a TA at RailsBridgeTri. RailsBridge is an organization that hosts weekend intro courses to Rails targeted at women. My partner, Ashley, came into programming through a RailsBridge event and is now the lead organizer of the local chapter (RailsBridgeTri) a year and a half later. Ashley is the one who introduced me to programming as well, so I have overwhelmingly warm feelings towards the organization.&lt;/p&gt;

&lt;p&gt;RailsBridge is set up over two days. On Friday night we have InstallFest, where participants come and install all the necessary programs for a basic dev environment (Ruby, Git, Brew, Atom, etc.). For a minority of people this is a pretty straightforward process, but for a lot of people, it’s pretty critical to have some devs wandering around to help troubleshoot the install process. Some people finish the install in twenty minutes, but a couple of people took close to three hours, through no real fault of their own.&lt;/p&gt;

&lt;p&gt;The second day is spent working through building a polling app in Rails. There is curriculum posted online, and participants work through it independently and are encouraged to ask for help if they get stuck.&lt;/p&gt;

&lt;p&gt;The event is targeted at people with zero programming experience who want to see what all the hype is about, so having a plethora of TA’s wandering around helping people who encounter problems is an absolute must for a successful event.&lt;/p&gt;

&lt;p&gt;It was an incredibly gratifying experience. I loved helping people and teaching them small tricks to help them out in future programming endeavors, such as pressing the up arrow to repeat a command in the Terminal or showing people ways to google problems and reinforcing that googling is 100% okay and a common practice by ALL programmers.&lt;/p&gt;

&lt;p&gt;While sharing tips was great and helping troubleshoot problems was a lot of fun, I got a lot of joy out of seeing all the ‘Ah-ha’ moments and happy dances (which I think every developer has done at their desk on multiple occasions) when someone figured out a problem. I know and remember exactly what those feelings are like, and I’m thrilled to see other people experiencing them.&lt;/p&gt;

&lt;p&gt;It was also gratifying to me in an oddly selfish way. I was initially kind of nervous to volunteer as a TA. As a newly minted junior developer, I was really worried I wouldn’t helpful to people or be able to solve their problems. Turns out, I was wrong. I was able to help lots of people during InstallFest, and then during the day of Rails, I actually never came across a question that I was totally out of my depth with. I got some questions about the basic structure of Rails, about Git and Heroku, and other general programming questions. Granted, these people are in their literal first days of programming, so I’m quite a bit ahead of them in terms of my programming experience, but it did remind me of much I know and how much I can offer to people just starting out.&lt;/p&gt;

&lt;p&gt;All in all, I had a fantastic time volunteering at RailsBridge and I’m so incredibly excited to volunteer at the next one!&lt;/p&gt;
</description>
        <pubDate>2016-02-28 00:00:00 -0500</pubDate>
        <link>http://andrewmpierce.github.io/2016/02/28/Volunteering-at-Railsbridge.html</link>
        <guid isPermaLink="true">http://andrewmpierce.github.io/2016/02/28/Volunteering-at-Railsbridge.html</guid>
        
        
      </item>
    
      <item>
        <title>I'm Officially a Professional?</title>
        <description>&lt;p&gt;I’m a legit professional developer now! I started at a junior developer position at AT&amp;amp;T about 2.5 weeks ago and have started to really get into the swing of things.  It’s been a lot of fun and also in some ways different than what I expected, although certainly not in a bad way. I thought it would be fun to talk about how my experience has been so far.&lt;/p&gt;

&lt;p&gt;I’m lucky to work in an environment that’s legitimately great for junior developers. Everyone is happy to help me if I get stuck on something, and I’m also working a full stack position, so I’ve been able to get my hands dirty with a lot of different technologies. Our backend is written in Perl, and I’ve also worked with editing AJAX calls in Javascript and in writing SQL queries to interact with our database. All of that has been great to really expand my skillset.&lt;/p&gt;

&lt;p&gt;One thing I’ve found really interesting is how much time I spend reading code now as opposed to writing code. Most of my job as a junior developer is spent debugging and adding small features that essentially aren’t worth the time of the more senior team members. As you can imagine, working at a place like AT&amp;amp;T I’m dealing with a MASSIVE code base. No one person knows the entire code base, so I spend a lot of time using CTRL-F and CTRL-SHIFT-F to find the things I need. I write very little code every day, generally less than 10-20 lines. Most of my time is spend identifying problems that are causing bugs and making fairly minor edits to the code to fix it.&lt;/p&gt;

&lt;p&gt;Compared to The Iron Yard, where I was writing and developing new things every day, this is definitely different! Not only that, but I’m debugging code that was potentially written five years ago and whoever wrote it certainly isn’t around anymore to ask. This has been really cool though. I’m learning a lot by reading so many hundreds of lines of code a day. I started using Vim at work in order to make myself a little more efficient in reading all that code, and its definitely been helpful.&lt;/p&gt;

&lt;p&gt;It’s also been really great to be pretty much left to my own devices. I get tickets I need to complete, which are just the debug requests or feature requests, and they have a set deadline, and I work on them and finish them. We have daily standups were we talk about our progress and if I feel like a ticket may go late, I just bring it up at standup or message one of my team leads, and they either adjust the due date, or get someone to help me on it, depending on the circumstances. If I need help, I ask for it, but overall I pretty much just do my work and talk to my coworkers and its pretty relaxed. Thats great! I remember always feeling a sense of constant urgency at The Iron Yard. Everything was intense and I was working incredible hours to make it all happen. Now I just do my 40 hours (my position is pretty firm about not working more) and its much much less stressful. I’m still early on into my position, but so far its been really great in that regard. Tickets generally are given several days to complete, and I’m learning so much in every one I do.&lt;/p&gt;

&lt;p&gt;The great part about this setup is that it gives me time at night and on the weekends to pursue things I’m interested in. I’ve been learning a lot of Rails and have even been contributing to a Rails project that another Iron Yard grad maintains. I love it! I have time to work on new things, but can also spend a night chilling out on my couch without feeling bad about it.&lt;/p&gt;

&lt;p&gt;All in all, so far so good!&lt;/p&gt;
</description>
        <pubDate>2016-02-20 00:00:00 -0500</pubDate>
        <link>http://andrewmpierce.github.io/2016/02/20/officially-a-professional.html</link>
        <guid isPermaLink="true">http://andrewmpierce.github.io/2016/02/20/officially-a-professional.html</guid>
        
        
      </item>
    
      <item>
        <title>Learning by Doing</title>
        <description>&lt;p&gt;This weekend I learned a LOT of Rails. I had the great opportunity to help a friend of mine on a fairly large project she owns. When she initially asked if I’d be able to help her out, I wasn’t sure if I had the knowledge and experience with Rails to actually be able to contribute to a codebase that people regularly use. Turns out that I totally can!&lt;/p&gt;

&lt;p&gt;I spent the weekend setting up bulk emails and adding buttons to the front end so it’s easy to send emails through the app. It was definitely a good assignment to get my hands in a lot of places. I was in the mailers, creating those, adding methods to a controller, reading through the models and schema to see the kind of information different objects had to be used in emails, and I spent time creating an email skeleton in the views. Finally I spent a lot of time troubleshooting in the config and initialize folders. I definitely plan to keep working through Rails Tutorial as its a much more gentle introduction and gives a lot of background information which is pretty nice to have. All in all, definitely a really productive weekend!&lt;/p&gt;

&lt;p&gt;In other news, I start a new job tomorrow. I accepted a junior full stack position with AT&amp;amp;T that I’m incredibly excited about. The backend is in Perl and I’ll be doing front end work with the standard HTML/CSS/JavaScript stack and working with MySQL databases. I’m looking forward to adding a lot of new skills to my resume and getting my hands dirty with a lot of different things!&lt;/p&gt;
</description>
        <pubDate>2016-02-02 00:00:00 -0500</pubDate>
        <link>http://andrewmpierce.github.io/2016/02/02/Learning-By-Doing.html</link>
        <guid isPermaLink="true">http://andrewmpierce.github.io/2016/02/02/Learning-By-Doing.html</guid>
        
        
      </item>
    
      <item>
        <title>Learning Day 5</title>
        <description>&lt;p&gt;I decided to retitle what I’m doing as just “Learning Day whatever”. While I’m focusing a lot of attention on Rails, I’m also doing other stuff, like working on my javascript skills and studying Perl.&lt;/p&gt;

&lt;p&gt;What I learned yesterday:
Yesterday I finished up Ch. 3 of Rails Tutorial and got a solid start on Ch.4, Rails Flavored Ruby. I also read the first chapter of Eloquent Javascript, as I’m trying to brush up on JS before I start a really exciting full stack opportunity.&lt;/p&gt;

&lt;p&gt;Ultimately, I came to the conclusion that Rails is really cool! It helps that I’m working through a tutorial that showing me exactly what to do, but its easy to see that Rails is popular for a very good reason. I learned about testing in rails, which seems easier and more natural than the testing I was doing in Django (full disclosure: It’s entirely possible that I just never learned the ‘natural feeling’ way to test in Django.) Guard is also really cool! Continuous testing == win.&lt;/p&gt;

&lt;p&gt;I also learned some baby step basics of Javascript. Eloquent Javascript is described more as an intro to programming through Javascript than an actual Javascript primer, so we’ll see what happens. I think it will definitely be enough to allow me to go into my new role with a decent foundational understanding. So far, Javascript hasn’t thrown anything too crazy into the mix, but its still early.&lt;/p&gt;

&lt;p&gt;What I’m going to do today:
My goal for today is to finish Rails Flavored Ruby and get a start on Ch. 5, “Filling in the Layout”. I’m also planning to read the second chapter of Eloquent Javascript.&lt;/p&gt;

&lt;p&gt;What I expect to learn:
I expect to learn more ways to incorporate legit Ruby code into your Rails application, as thus far its been mostly Rails specific commands.  &lt;/p&gt;

&lt;p&gt;I also expect to learn about Programming Structure in Javascript. We’ll see what that entails.&lt;/p&gt;
</description>
        <pubDate>2016-01-29 00:00:00 -0500</pubDate>
        <link>http://andrewmpierce.github.io/2016/01/29/Learning-Day-5.html</link>
        <guid isPermaLink="true">http://andrewmpierce.github.io/2016/01/29/Learning-Day-5.html</guid>
        
        
      </item>
    
      <item>
        <title>Learning Rails Day 4</title>
        <description>&lt;p&gt;Another day of Rails! I was able to finish up Chapter 2 yesterday and get a good start on Chapter 3. Today I don’t have nearly as much scheduled, so I should be able to get some really solid work in!&lt;/p&gt;

&lt;p&gt;What I learned yesterday:
Yesterday I continued to be amazed by scaffolding in Rails! I finished up the toy app and used an incredibly small amount of code. Overall, I’m very glad I have a background with Django and understand the general MVC framework. It’s made learning Rails pretty manageable thus far.&lt;/p&gt;

&lt;p&gt;What I’m going to do today:
I got a solid start on Ch. 3 yesterday, building static pages, and today I hope to get through Ch. 4. I have a lot less on my plate that the past few days, so it finally seems like I’ll be able to hit my learning goals. I’ve been really focused on digesting the material, so I’ve not been too hung up on getting through X chapters a day, it’s really just for me to eyeball what I’d like to get done.&lt;/p&gt;

&lt;p&gt;What I expect to learn:
I expect to learn about building static pages in Rails and incorporating some Rails flavored Ruby!&lt;/p&gt;
</description>
        <pubDate>2016-01-28 00:00:00 -0500</pubDate>
        <link>http://andrewmpierce.github.io/2016/01/28/Rails-Day-4.html</link>
        <guid isPermaLink="true">http://andrewmpierce.github.io/2016/01/28/Rails-Day-4.html</guid>
        
        
      </item>
    
      <item>
        <title>Learning Rails Day 3</title>
        <description>&lt;p&gt;Another busy day! I spent the morning finishing a code sample and then my fiance and I went to look at a venue for our wedding this fall. Busy busy!&lt;/p&gt;

&lt;p&gt;What I learned yesterday:
Again, I learned a lot of Perl and some Javascript yesterday.&lt;/p&gt;

&lt;p&gt;What I’m going to do today:
My goal for the night is to do some more Rails stuff. I expect to finish the last few pages of Chapter 2 of Rails Tutorial and then get working on Chapter 3.&lt;/p&gt;

&lt;p&gt;What I expect to learn:
I expect to start learning how to put together the basic pieces of a Rails app with scaffolding!&lt;/p&gt;
</description>
        <pubDate>2016-01-27 00:00:00 -0500</pubDate>
        <link>http://andrewmpierce.github.io/2016/01/27/Rails-Day-3.html</link>
        <guid isPermaLink="true">http://andrewmpierce.github.io/2016/01/27/Rails-Day-3.html</guid>
        
        
      </item>
    
      <item>
        <title>Learning Rails Day 2</title>
        <description>&lt;p&gt;So I had a bit of a change of plans from what I had set out with yesterday. I ended up having an interview today! It was scheduled yesterday, so I ended up changing gears to prep for it with all the limited time I had available. So unfortunately, very little Rails was done yesterday or today (although a little bit was!). Instead I spent a lot of time pouring over Perl and learning the baby step basics of Javascript.&lt;/p&gt;

&lt;p&gt;What I learned yesterday:
Yesterday I learned a lot of Perl! I incorporated Unit Testing using Test::Simple and also starting learning some basic Javascript so I’d have something to talk about today. I was able to find a Javascript assignment from the Rails course that I worked on and was able to learn the basics of how to incorporate Javascript into a Rails application, which was definitely nice to keep working with Rails in a small way.&lt;/p&gt;

&lt;p&gt;What I’m going to do today:
This is being posted fairly late, but I intend to spend the rest of the night working on a code sample for the position I interviewed for today.&lt;/p&gt;

&lt;p&gt;What I expect to learn:
How to put out an awesome code sample doing things I haven’t done before with Perl!&lt;/p&gt;
</description>
        <pubDate>2016-01-26 00:00:00 -0500</pubDate>
        <link>http://andrewmpierce.github.io/2016/01/26/Learning-Rails-Day-2.html</link>
        <guid isPermaLink="true">http://andrewmpierce.github.io/2016/01/26/Learning-Rails-Day-2.html</guid>
        
        
      </item>
    
      <item>
        <title>Learning Rails Day 1</title>
        <description>&lt;p&gt;I spent the past week or so learning Perl and really enjoyed it and learned a lot in the process. I’m no Perl expert, but I can write fairly basic scripts now and read Perl code fairly effectively. I’ve also done a fair bit of work writing Ruby scripts in the past week, successfully rewriting a Powerball simulator that I initially wrote in Perl, in Ruby.&lt;/p&gt;

&lt;p&gt;While I enjoyed Perl, I wanted to move on and try and learn something else. I’ve always had a lot of respect for the Ruby and Rails communities and want to learn enough to be a real part of it. I’ve been attending local Ruby meetups and I’ve really enjoyed meeting members of the local Ruby community.&lt;/p&gt;

&lt;p&gt;I’ve decided to start keeping a daily blog with a simple format, what I learned yesterday, what I’m going to do today, and what I expect to learn. This will help me keep a good grasp on where I’m at and allow other people to get an idea of things that might work for them.&lt;/p&gt;

&lt;p&gt;What I learned yesterday:
Yesterday I started working through Michael Hartl’s Rails Tutorial. I learned Django at The Iron Yard, so a lot of the concepts are familiar to me. I’ve only worked through the first chapter so far, so its been mostly introductory concepts. I did learn about scaffolding in Rails, which is pretty sweet, if a bit terrifying to have so much auto-generated code. Django does have generic views, but nothing like scaffolding to my knowledge.&lt;/p&gt;

&lt;p&gt;What are you going to do today:
Today my goal is to work through at least chapters 2-5 of Rails Tutorial. I expect to build my first Toy app with scaffolding, and then move on to start creating a Twitter clone without any scaffolding.&lt;/p&gt;

&lt;p&gt;What do you expect to learn:
I expect to learn about the ease of scaffolded code, then learn how to write similar code without the scaffold generator.&lt;/p&gt;
</description>
        <pubDate>2016-01-25 00:00:00 -0500</pubDate>
        <link>http://andrewmpierce.github.io/2016/01/25/Learning-Rails-Day-1.html</link>
        <guid isPermaLink="true">http://andrewmpierce.github.io/2016/01/25/Learning-Rails-Day-1.html</guid>
        
        
      </item>
    
      <item>
        <title>Perl Vs. Python</title>
        <description>&lt;p&gt;Note: I wrote a Powerball simulator in Perl! &lt;a href=&quot;https://github.com/andrewmpierce/powerball-simuluator-perl&quot;&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lately I’ve spent a good bit of time learning and playing with Perl. While I’m still
certainly a lot more comfortable with Python than Perl, I can write basic programs and
read Perl code decently well.&lt;/p&gt;

&lt;p&gt;I started picking up Perl mostly because I kept on seeing it paired with Python on job boards (which does make sense since they’re both pretty useful scripting languages) and I’ve frequently heard Perl referred to as “The duct tape of the internet”, which certainly sounds interesting.&lt;/p&gt;

&lt;p&gt;Learning a new language in general has taught me SO much about programming in a broad sense and I’m really glad I dove in. Perl sometimes seems to behave in ways that surprise me, but I can’t really determine if that’s Perl being a weird language, or just a thing that I didn’t know much about before.&lt;/p&gt;

&lt;p&gt;My biggest program so far in Perl has been a Powerball simulator. With all the Powerball mania lately I wanted to create a simulator that would allow a user to 1) buy multiple tickets per draw and 2) incorporated the PowerPlay multiplier if the user so chose. I haven’t seen these features in any of the most popular online simulators and thought it would be a fun project.&lt;/p&gt;

&lt;p&gt;I ran into quite a few problems I wouldn’t have had in Python. First, having to declare the scope of my variables was a really interesting problem to have. Several times I tried to call local variables, or ‘my’ variables, from outside their scope and obviously this didn’t work. I have to be conscious of where I’m going to be using these variables and consciously use ‘our’ if I think I’ll need the variable in a global scope. The ‘local’ keyword was also a pretty interesting way to redefine existing global variables in a limited local scope. In Python, I never thought about my variable’s scope, I knew variables called in functions or methods were obviously local and unknown outside of it, but having to actively say the scope made me revisit the whole concept.&lt;/p&gt;

&lt;p&gt;Later on, I discovered an incredibly frustrating bug in my program. I was trying to pass two arrays into a subroutine and it wasn’t defining the second array. This really perplexed me. I went through every line of code thinking that it must be an error I made in the creation of the second array. Ultimately I googled my problem and discovered that apparently you just can’t do that in Perl. You can pass in multiple scalars no problem, or pass in a single array, but trying to pass in more than array results in a single combined array for the first value. The work around is to create a scalar reference to your arrays, pass those in to your subroutine, and then effectively unpack them back into arrays once back inside the subroutine.&lt;/p&gt;

&lt;p&gt;Interestingly, the core idealogies of Python and Perl are very much in conflict. The Zen of Python is that there should be one obvious way to do something, or the most ‘pythonic’ solution, this lends itself to pretty clear cut and simple code in comparison to a language like Perl. One of Perl’s mottos is TIMTOWTDI or The Is More Than One Way To Do It. This creates code that is often pretty ugly looking and Perl is notoriously hard to read for anyone who didn’t have a hand in writing the code in question. However, this also gives Perl a lot of flexibility and there’s a lot that you can do with it, which is pretty appealing. Overall, the comparison to duct tape, effective but potentially ugly, seems pretty fair for Perl. &lt;/p&gt;
</description>
        <pubDate>2016-01-21 00:00:00 -0500</pubDate>
        <link>http://andrewmpierce.github.io/2016/01/21/Perl-Vs-Python.html</link>
        <guid isPermaLink="true">http://andrewmpierce.github.io/2016/01/21/Perl-Vs-Python.html</guid>
        
        
      </item>
    
      <item>
        <title>What I've been up to a month post TIY</title>
        <description>&lt;p&gt;I realized today that The Iron Yard’s Demo Day was exactly a month ago today. The time has flown by! While my holidays have been much more relaxed than The Iron Yard, its still been a busy enough time for me. I’ve been interviewing with several companies, reading and learning a lot, and getting some much needed sleep.&lt;/p&gt;

&lt;p&gt;Interviewing, which I plan to write about more once I’ve accepted a position somewhere, has overall been a good experience. I’ve enjoyed learning about different companies and the kinds of technologies that they’re working with and what I would be using if I worked with them. It’s definitely a stressful and nerve wracking process, but overall its still pretty cool.&lt;/p&gt;

&lt;p&gt;I’ve also just been learning a LOT. I’ve been putting in a lot of time to researching the specific niches that the companies I’m applying for work in and how to get at least a basic idea of what they do and what I’d be doing there before I interview. While The Iron Yard has taught me a lot about Python, there are still a lot of areas in and around the tech industry that I don’t know a lot about. I think its fair to say that thats not unlike most people (even veterans of the industry), but it certainly means I need to do a lot of legwork.&lt;/p&gt;

&lt;p&gt;I’ve been doing little things like work on exercism tasks, playing with Flask, messing with a little bit of Ruby, and reworking some of my old code from The Iron Yard. &lt;/p&gt;

&lt;p&gt;I’ve also been recovering a bit from the intensity of The Iron Yard. I really pushed myself hard, so while I think I’m still getting a good amount of work in, I’m also trying very hard to enjoy myself a little, get outside, play with my dog more, and catch up on the rest of my life before I dive into the tech industry in a full time role.&lt;/p&gt;
</description>
        <pubDate>2015-12-20 00:00:00 -0500</pubDate>
        <link>http://andrewmpierce.github.io/2015/12/20/Recooping-post-TIY.html</link>
        <guid isPermaLink="true">http://andrewmpierce.github.io/2015/12/20/Recooping-post-TIY.html</guid>
        
        
      </item>
    
  </channel>
</rss>
